//
//  ExtractViewController.swift
//  TesteSantander
//
//  Created by Hugo Abolis Jordao on 13/06/19.
//  Copyright (c) 2019 Hugo Abolis Jordao. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Alamofire

protocol ExtractDisplayLogic: class
{
  func displaySomething(viewModel: Extract.Something.ViewModel)
}

class ExtractViewController: UIViewController, ExtractDisplayLogic
{
  var interactor: ExtractBusinessLogic?
  var router: (NSObjectProtocol & ExtractRoutingLogic & ExtractDataPassing)?
    var response: Extract.Something.Response?
    
    @IBOutlet weak var userNameLabel: UILabel!
    @IBOutlet weak var userAccountLabel: UILabel!
    @IBOutlet weak var userBalance: UILabel!
    @IBOutlet weak var tableView: UITableView!
    @IBOutlet weak var logoutButton: UIButton!
    
    

    @IBAction func logoutButton(_ sender: Any) {
        self.dismiss(animated: true, completion: nil)
        
    }
    
    
  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = ExtractInteractor()
    let presenter = ExtractPresenter()
    let router = ExtractRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    tableView.register(UINib(nibName: "ExtractTableViewCell", bundle: nil), forCellReuseIdentifier: "extractTableViewCell")
    doSomething()
    GetExtractDataTeste()
  }
  
  // MARK: Do something
  
  //@IBOutlet weak var nameTextField: UITextField!
  
  func doSomething()
  {
    let request = Extract.Something.Request()
    interactor?.doSomething(request: request)
  }
  
  func displaySomething(viewModel: Extract.Something.ViewModel)
  {
    //nameTextField.text = viewModel.name
  }
    
    
    func GetExtractDataTeste(){
        Alamofire.request("https://bank-app-test.herokuapp.com/api/statements/1").responseJSON { response in
            if let data = response.data{
                do{
                    let decoder = JSONDecoder()
                    self.response = try decoder.decode(Extract.Something.Response.self, from: data)
                    DispatchQueue.main.async {
                        self.tableView.reloadData()
                    }
                }catch{
                    print(error)
                    print("Error deserializing")
                }
            }
        }
    }
}

extension ExtractViewController: UITableViewDataSource{
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return response?.statementList?.count ?? 0
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "extractTableViewCell", for: indexPath) as! ExtractTableViewCell
        
        if response?.statementList != nil{
            if response!.statementList!.count > indexPath.row{
                let item = response!.statementList![indexPath.row]
                cell.configureCell(title: item.title ?? "", date: item.date ?? "", name: item.desc ?? "", amount: String(item.value ?? 0.0))
            }
        }
        
        return cell
    }
    
    
}
